#include<iostream>
#include<queue>

using namespace std;

queue<int> q1;

/**********  Method1 **********
*Pop() takes O(n) and Push O(1);
*******************************/

/*Pop - uses two queues.
- until the last element in the queue >> Pop from queue q1 and push to q2
- At the end swap q1 with q2.
*/
/*Push - Uses one queue
- Push the element to the queue
*/

int Pop()
{
  queue<int> q2;
  int i=q1.size();
  int n;
  while((i-1)>0)
  {
    n=q1.front();
    q1.pop();
    q2.push(n);
    i--;
  }
  swap(q1,q2);
}

int push(int n)
{

  q1.push(n);

}

int main() {

  auto i=5;
  int N;
  for(i=0;i<5;i++){
    cin >> N;
    push(N);
    }

  cout<<"stack top"<<q1.back()<<endl;
  cout<<"stack size "<<q1.size()<<endl;

  Pop();
  Pop();
  cout<<"stack top"<<q1.back()<<endl;
  cout<<"stack size "<<q1.size()<<endl;

  push(1);

  cout<<"stack top"<<q1.back()<<endl;
  cout<<"stack size "<<q1.size()<<endl;

}

/**********  Method2 **********
*Pop() takes O(1) and Push O(n);
*******************************/

/*Push - uses two queues.
-Push new element to q2
- until the last element in the queue >> Pop from queue q1 and push to q2
- At the end swap q1 with q2.
*/
/*Pop - Uses one queue
- Pop the element to the queue
*/


int Pop2()
{
  q1.pop();
}

int push2(int m)
{
  queue<int> q2;
  q2.push(m);
  int i=q1.size();
  int n;
  while(i>0)
  {
    n=q1.front();
    q1.pop();
    q2.push(n);
    i--;
  }
  swap(q1,q2);
}

int main() {

  vector<int> s1{6,7,4,5,8};
  for(vector<int>::iterator it=s1.begin(); it!=s1.end(); it++)
      push2(*it);

  cout<<"stack top"<<q1.back()<<endl;
  cout<<"stack size "<<q1.size()<<endl;

  Pop();

  cout<<"stack top"<<q1.back()<<endl;
  cout<<"stack size "<<q1.size()<<endl;

  //push(1);
  /*
  cout<<"stack top"<<q1.back()<<endl;
  cout<<"stack size "<<q1.size()<<endl;
  */
}
